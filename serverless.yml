service: halcyon

useDotenv: true
variablesResolutionMode: 20210219

provider:
    name: aws
    runtime: nodejs14.x
    stage: local
    region: eu-west-1
    memorySize: 1024
    logRetentionInDays: 3
    apiGateway:
        shouldStartNameWithService: true
    lambdaHashingVersion: 20201221
    environment:
        VERSION: ${self:custom.version}
        STAGE: ${self:custom.stage}
        AWS_ACCOUNTID: ${self:custom.accountId}
        JWT_SECURITYKEY: ${env:JWT_SECURITYKEY, ''}
        JWT_AUDIENCE: ${env:JWT_AUDIENCE, ''}
        JWT_ISSUER: ${env:JWT_ISSUER, ''}
        JWT_EXPIRESIN: ${env:JWT_EXPIRESIN, ''}
        MAILGUN_DOMAIN: ${env:MAILGUN_DOMAIN, ''}
        MAILGUN_APIKEY: ${env:MAILGUN_APIKEY, ''}
        MAILGUN_NOREPLY: ${env:MAILGUN_NOREPLY, ''}
        SEED_EMAILADDRESS: ${env:SEED_EMAILADDRESS, ''}
        SEED_PASSWORD: ${env:SEED_PASSWORD, ''}
        CLIENT_URL: ${env:CLIENT_URL, self:custom.s3.client.url}
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - sns:*
                  Resource:
                      - ${self:custom.sns.events.arn}
                - Effect: Allow
                  Action:
                      - dynamodb:*
                  Resource:
                      - ${self:custom.dynamodb.entities.arn}*

package:
    individually: true

plugins:
    - serverless-pseudo-parameters
    - serverless-webpack
    - serverless-dynamodb-local
    - serverless-offline
    - serverless-offline-sns
    - serverless-api-gateway-throttling
    - serverless-build-client
    - serverless-s3-sync

functions:
    events:
        handler: api/eventHandlers/index.handler
        events:
            - sns:
                  arn: ${self:custom.sns.events.arn}
                  topicName: ${self:custom.sns.events.topicName}

    app:
        handler: api/index.handler
        events:
            - http:
                  path: /
                  method: ANY
                  cors: ${self:custom.cors}
            - http:
                  path: /{proxy+}
                  method: ANY
                  cors: ${self:custom.cors}

custom:
    accountId: '#{AWS::AccountId}'
    region: ${opt:region, self:provider.region}
    stage: ${opt:stage, self:provider.stage}
    version: ${env:VERSION, ''}
    prefix: ${self:service}-${self:custom.stage}
    endpoint: ${cf:${self:custom.prefix}.ServiceEndpoint, ''}

    cors:
        origin: '*'
        headers: '*'
        allowCredentials: true

    apiGatewayThrottling:
        maxRequestsPerSecond: 10
        maxConcurrentRequests: 5

    s3:
        client:
            bucket: ${self:custom.prefix}
            url: http://${self:custom.s3.client.bucket}.s3-website-${self:custom.region}.amazonaws.com

    sns:
        events:
            topicName: ${self:custom.prefix}-events
            arn: arn:aws:sns:${self:custom.region}:${self:custom.accountId}:${self:custom.sns.events.topicName}

    dynamodb:
        entities:
            tableName: ${self:custom.prefix}-entities
            arn: arn:aws:dynamodb:${self:custom.region}:${self:custom.accountId}:table/${self:custom.dynamodb.entities.tableName}
        stages:
            - local
        start:
            migrate: true
            dbPath: .dynamodb/

    serverless-offline:
        httpPort: 3001
        noPrependStageInUrl: true

    serverless-offline-sns:
        port: 4002
        debug: true

    buildClient:
        environment:
            REACT_APP_VERSION: ${self:custom.version}
            REACT_APP_GA_MEASUREMENTID: ${env:GA_MEASUREMENTID, ''}
            REACT_APP_GRAPHQL_URL: ${env:GRAPHQL_URL, self:custom.endpoint}

    s3Sync:
        - bucketNameKey: ClientBucketOutputKey
          localDir: build
          deleteRemoved: true
          acl: public-read

resources:
    Resources:
        EventsSnsTopic:
            Type: AWS::SNS::Topic
            Properties:
                TopicName: ${self:custom.sns.events.topicName}

        EntitiesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.dynamodb.entities.tableName}
                AttributeDefinitions:
                    - AttributeName: pk
                      AttributeType: S
                    - AttributeName: sk
                      AttributeType: S
                    - AttributeName: gs1pk
                      AttributeType: S
                    - AttributeName: gs1sk
                      AttributeType: S
                KeySchema:
                    - AttributeName: pk
                      KeyType: HASH
                    - AttributeName: sk
                      KeyType: RANGE
                GlobalSecondaryIndexes:
                    - IndexName: gs1-index
                      KeySchema:
                          - AttributeName: gs1pk
                            KeyType: HASH
                          - AttributeName: gs1sk
                            KeyType: RANGE
                      Projection:
                          ProjectionType: 'ALL'
                BillingMode: PAY_PER_REQUEST

        ClientBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.s3.client.bucket}
                AccessControl: PublicRead
                WebsiteConfiguration:
                    IndexDocument: index.html
                    ErrorDocument: index.html

    Outputs:
        ClientBucketOutputKey:
            Value: !Ref ClientBucket
